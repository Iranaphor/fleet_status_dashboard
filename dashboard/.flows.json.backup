[
    {
        "id": "74f9e71cad0b485a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "89d704a479c1d238",
        "type": "mqtt-broker",
        "name": "LCAS Broker",
        "broker": "mqtt.lcas.group",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "27a07c504a25bef3",
        "type": "ui_tab",
        "name": "Research WS Form",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "403a1a7c6bba8af2",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "3de19491c2d96cf1",
        "type": "ui_group",
        "name": "Table",
        "tab": "27a07c504a25bef3",
        "order": 1,
        "disp": true,
        "width": "35",
        "collapse": false,
        "className": ""
    },
    {
        "id": "87c41f4ea777e050",
        "type": "ui_group",
        "name": "Form",
        "tab": "be573db05f70ced9",
        "order": 2,
        "disp": true,
        "width": "35",
        "collapse": true,
        "className": ""
    },
    {
        "id": "a7f52d91f67fcff8",
        "type": "ui_group",
        "name": "Form",
        "tab": "27a07c504a25bef3",
        "order": 2,
        "disp": true,
        "width": "35",
        "collapse": true,
        "className": ""
    },
    {
        "id": "1be3c1d3644e7083",
        "type": "ui_group",
        "d": true,
        "name": "Actions",
        "tab": "57f6a300f26985f5",
        "order": 2,
        "disp": true,
        "width": "20",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4675a91bb0f30641",
        "type": "ui_spacer",
        "z": "74f9e71cad0b485a",
        "name": "spacer",
        "group": "3de19491c2d96cf1",
        "order": 1,
        "width": "1",
        "height": "6"
    },
    {
        "id": "57f6a300f26985f5",
        "type": "ui_tab",
        "name": "Hide_Show",
        "icon": "dashboard",
        "order": 1,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "a40734d79c98dc24",
        "type": "ui_group",
        "name": "Function",
        "tab": "57f6a300f26985f5",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b0937f59c6faf3f4",
        "type": "ui_group",
        "name": "Setting",
        "tab": "57f6a300f26985f5",
        "order": 3,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "cba4d14815b780d6",
        "type": "ui_spacer",
        "z": "74f9e71cad0b485a",
        "name": "spacer",
        "group": "b0937f59c6faf3f4",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "ae84df0a4f3852b4",
        "type": "ui_spacer",
        "z": "74f9e71cad0b485a",
        "name": "spacer",
        "group": "b0937f59c6faf3f4",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "d579155fbbce64ab",
        "type": "ui_spacer",
        "z": "74f9e71cad0b485a",
        "name": "spacer",
        "group": "b0937f59c6faf3f4",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "bd6ed048b5a38d0d",
        "type": "ui_spacer",
        "z": "74f9e71cad0b485a",
        "name": "spacer",
        "group": "b0937f59c6faf3f4",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "68b9f9a54b5643dd",
        "type": "ui_tab",
        "name": "Full Dashboard",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ddc248bb9c67f143",
        "type": "ui_group",
        "name": "Full Table",
        "tab": "68b9f9a54b5643dd",
        "order": 1,
        "disp": true,
        "width": 35,
        "collapse": false,
        "className": ""
    },
    {
        "id": "be573db05f70ced9",
        "type": "ui_tab",
        "name": "Robot WS Form",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5bc9e89c949c3ebb",
        "type": "ui_group",
        "name": "Table",
        "tab": "be573db05f70ced9",
        "order": 1,
        "disp": true,
        "width": "35",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8056db6eaee640c6",
        "type": "ui_tab",
        "name": "Command Form",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9f7e46cb54397403",
        "type": "ui_group",
        "name": "Table",
        "tab": "8056db6eaee640c6",
        "order": 1,
        "disp": true,
        "width": "35",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8b28850125138875",
        "type": "ui_tab",
        "name": "Dashboard WS Form",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cffc62065f25e999",
        "type": "ui_group",
        "name": "Table",
        "tab": "8b28850125138875",
        "order": 1,
        "disp": true,
        "width": "35",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6b3dd49f3efda1e9",
        "type": "ui_group",
        "name": "Form",
        "tab": "8056db6eaee640c6",
        "order": 2,
        "disp": true,
        "width": "35",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b7a68b9898db523f",
        "type": "ui_group",
        "name": "Form",
        "tab": "8b28850125138875",
        "order": 2,
        "disp": true,
        "width": "35",
        "collapse": false,
        "className": ""
    },
    {
        "id": "023cab4af90cbcf5",
        "type": "ui_spacer",
        "z": "74f9e71cad0b485a",
        "name": "spacer",
        "group": "ddc248bb9c67f143",
        "order": 1,
        "width": "1",
        "height": "12"
    },
    {
        "id": "664791514c502ff1",
        "type": "ui_spacer",
        "z": "74f9e71cad0b485a",
        "name": "spacer",
        "group": "5bc9e89c949c3ebb",
        "order": 1,
        "width": "1",
        "height": "6"
    },
    {
        "id": "d74ee42bad15ec54",
        "type": "ui_spacer",
        "z": "74f9e71cad0b485a",
        "name": "spacer",
        "group": "9f7e46cb54397403",
        "order": 1,
        "width": "33",
        "height": "5"
    },
    {
        "id": "1ebee16746b75711",
        "type": "ui_spacer",
        "z": "74f9e71cad0b485a",
        "name": "spacer",
        "group": "cffc62065f25e999",
        "order": 1,
        "width": "1",
        "height": "6"
    },
    {
        "id": "1c23356fa3270b15",
        "type": "mqtt in",
        "z": "74f9e71cad0b485a",
        "name": "",
        "topic": "mrs_fleet_dashboard/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "89d704a479c1d238",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 100,
        "wires": [
            [
                "9470163941ca997e",
                "a299024319fe4c6d"
            ]
        ]
    },
    {
        "id": "a299024319fe4c6d",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "name": "Format data into fleetData",
        "func": "// Extract topic and payload\nlet topicParts = msg.topic.split(\"/\");  // Split topic into an array\nlet value = msg.payload;  // Get the new value\n\n// Ensure topic structure is correct (at least 6 parts for workspaces)\nif (topicParts.length < 5) {\n    node.warn(\"Invalid topic structure: \" + msg.topic);\n    return null;\n}\n\n// Extract manufacturer, serial number, section, and workspace\nlet manufacturer = topicParts[1];  // \"default_manufacturer\"\nlet serial = topicParts[2];  // \"default_serial_number\"\n\n// Retrieve or initialize stored data (persistent across messages)\nlet fleetData = flow.get(\"fleetData\") || {};\n\n// Ensure manufacturer exists\nif (!fleetData[manufacturer]) {\n    fleetData[manufacturer] = {};\n}\n\n// Ensure serial number exists\nif (!fleetData[manufacturer][serial]) {\n    fleetData[manufacturer][serial] = {\n        manufacturer: manufacturer,\n        serial: serial,\n        robot_name: \"\",\n        \"robot_ws/branch\": \"\",\n        \"robot_ws/status\": \"\",\n        \"research_ws/remote\": \"\",\n        \"research_ws/branch\": \"\",\n        \"research_ws/status\": \"\",\n        battery: \"\",\n        last_online: \"\",\n        selected: false\n    };\n    node.warn(`New robot with uuid of [${serial}] by [${manufacturer}]`);\n}\n\n// Update the correct field based on topic\nlet b_prefix = \"<span style='color: blue; font - weight: bold;'>\"\nlet r_prefix = \"<span style='color: green; font - weight: bold;'>\"\nlet suffix = \"</span>\"\n\nif (topicParts[3] === \"dashboard\") {\n    if (topicParts[4] === \"meta\") {\n        if (topicParts[5] === \"robot_name\") fleetData[manufacturer][serial].robot_name = value;\n        if (topicParts[5] === \"last_online\") fleetData[manufacturer][serial].last_online = value;\n        if (topicParts[5] === \"battery\") fleetData[manufacturer][serial].battery = JSON.stringify(value);\n    } else if (topicParts[4] === \"workspaces\") {\n        if (topicParts[5] === \"robot_ws\") {\n            if (topicParts[6] === \"git_branch\") fleetData[manufacturer][serial][\"robot_ws/branch\"] = b_prefix + value + suffix;\n            if (topicParts[6] === \"git_status\") fleetData[manufacturer][serial][\"robot_ws/status\"] = b_prefix + value + suffix;\n        }\n        if (topicParts[5] === \"research_ws\") {\n            if (topicParts[6] === \"git_branch\") fleetData[manufacturer][serial][\"research_ws/branch\"] = r_prefix + value + suffix;\n            if (topicParts[6] === \"git_status\") fleetData[manufacturer][serial][\"research_ws/status\"] = r_prefix + value + suffix;\n            if (topicParts[6] === \"git_remote\") fleetData[manufacturer][serial][\"research_ws/remote\"] = r_prefix + value + suffix;\n        }\n    }\n}\n\n// Store the updated data persistently\nflow.set(\"fleetData\", fleetData);\n\n// Convert stored data to array format for ui_table\nmsg.payload = Object.values(fleetData).flatMap(manufacturerData => Object.values(manufacturerData));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "9225b179d98ad152",
                "8bc3dfad47706ba0"
            ]
        ]
    },
    {
        "id": "4215a8f8e41d6ebe",
        "type": "ui_table",
        "z": "74f9e71cad0b485a",
        "group": "5bc9e89c949c3ebb",
        "name": "Status Table",
        "order": 2,
        "width": "33",
        "height": "5",
        "columns": [
            {
                "field": "selected",
                "title": "",
                "width": "2%",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "manufacturer",
                "title": "Manufacturer",
                "width": "6%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "serial",
                "title": "Serial #",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_name",
                "title": "Robot Name",
                "width": "10%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_ws/branch",
                "title": "Branch",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_ws/status",
                "title": "Status",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/remote",
                "title": "Research Remote",
                "width": "28%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/branch",
                "title": "Branch",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/status",
                "title": "Status",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "battery",
                "title": "Battery",
                "width": "4%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "last_online",
                "title": "Last Seen",
                "width": "10%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 850,
        "y": 200,
        "wires": [
            [
                "da4812d5446d2934"
            ]
        ]
    },
    {
        "id": "9470163941ca997e",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 60,
        "wires": []
    },
    {
        "id": "9225b179d98ad152",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "name": "debug to console",
        "active": false,
        "tosidebar": false,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 60,
        "wires": []
    },
    {
        "id": "fcf6ee8dd005be1d",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 180,
        "wires": []
    },
    {
        "id": "6750ecdadbf2dc4e",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "name": "Set 'Selected'",
        "func": "// Extract manufacturer and serial number\nlet manufacturer = msg.payload.manufacturer;\nlet serial = msg.payload.serial;\n\n// Retrieve or initialize stored data (persistent across messages)\nlet fleetData = flow.get(\"fleetData\");\n\n// Update the correct field based on whether it's already selected\nlet selected = msg.payload.selected;\nif (selected === false) {\n    fleetData[manufacturer][serial].selected = true\n} else {\n    fleetData[manufacturer][serial].selected = false\n}\n\n// Store the updated data persistently\nflow.set(\"fleetData\", fleetData);\n\n// Convert stored data to array format for ui_table\nmsg.payload = Object.values(fleetData).flatMap(manufacturerData => Object.values(manufacturerData));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 140,
        "wires": [
            [
                "3595bb0fa2704c6b",
                "8bc3dfad47706ba0"
            ]
        ]
    },
    {
        "id": "6945521eefaf77e0",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "name": "Clear fleetData",
        "func": "// Store the updated data persistently\nflow.set(\"fleetData\", {});\n\n// Convert stored data to array format for ui_table\nmsg.payload = [];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 220,
        "wires": [
            [
                "8bc3dfad47706ba0"
            ]
        ]
    },
    {
        "id": "a49b73a2a75847b3",
        "type": "ui_button",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "group": "ddc248bb9c67f143",
        "order": 3,
        "width": "30",
        "height": "1",
        "passthru": false,
        "label": "Clear Table",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 310,
        "y": 220,
        "wires": [
            [
                "6945521eefaf77e0"
            ]
        ]
    },
    {
        "id": "3595bb0fa2704c6b",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 100,
        "wires": []
    },
    {
        "id": "dd5e596b9388619d",
        "type": "ui_form",
        "z": "74f9e71cad0b485a",
        "name": "Update Robot Workspace",
        "label": "",
        "group": "87c41f4ea777e050",
        "order": 8,
        "width": "25",
        "height": "6",
        "options": [
            {
                "label": "New Remote",
                "value": "remote",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "New Branch",
                "value": "branch",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Date to Update",
                "value": "date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Time to Update",
                "value": "time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Git Token",
                "value": "token",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "remote": "",
            "branch": "",
            "date": "",
            "time": "",
            "token": ""
        },
        "payload": "",
        "submit": "Apply to Selected Robots",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 690,
        "y": 540,
        "wires": [
            [
                "67e32e6a6e0bb464",
                "cf5cdb25f59c4dd0"
            ]
        ]
    },
    {
        "id": "67e32e6a6e0bb464",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "name": "Identify Selected Robots",
        "func": "// Extract form fields from msg.payload\nlet formData = msg.payload;  // Assumes payload contains {remote, branch, time, date, token}\n\n// Retrieve fleetData from flow context\nlet fleetData = flow.get(\"fleetData\") || {};\n\n// Initialize an array to store MQTT messages\nlet mqttMessages = [];\n\n// Iterate through fleetData to find selected items\nfor (const [manufacturer, serials] of Object.entries(fleetData)) {\n    for (const [serial, data] of Object.entries(serials)) {\n        // Check if 'selected' exists and is true\n        if (data.selected === true) {\n            // Construct MQTT topic\n            for (const [key, value] of Object.entries(formData)) {\n                let topic = `mrs_fleet_dashboard/${manufacturer}/${serial}/dashboard/updates/robot_ws/${key}`;\n\n                // Construct MQTT message\n                let mqttMessage = {\n                    topic: topic,\n                    payload: JSON.stringify(value),  // Sending the form data as JSON\n                    qos: 1,\n                    retain: false\n                };\n\n                // Add to messages list\n                mqttMessages.push(mqttMessage);\n            }\n        }\n    }\n}\n\n// Return messages for MQTT output node\nreturn [mqttMessages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 540,
        "wires": [
            [
                "90bb86db1fda5610"
            ]
        ]
    },
    {
        "id": "90bb86db1fda5610",
        "type": "mqtt out",
        "z": "74f9e71cad0b485a",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "89d704a479c1d238",
        "x": 1210,
        "y": 540,
        "wires": []
    },
    {
        "id": "cf5cdb25f59c4dd0",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 500,
        "wires": []
    },
    {
        "id": "df4b4b5dbaa15336",
        "type": "ui_form",
        "z": "74f9e71cad0b485a",
        "name": "Update Research Workspace",
        "label": "",
        "group": "a7f52d91f67fcff8",
        "order": 8,
        "width": "25",
        "height": "6",
        "options": [
            {
                "label": "New Remote",
                "value": "remote",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "New Branch",
                "value": "branch",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Date to Update",
                "value": "date",
                "type": "date",
                "required": false,
                "rows": null
            },
            {
                "label": "Time to Update",
                "value": "time",
                "type": "time",
                "required": false,
                "rows": null
            },
            {
                "label": "Git Token",
                "value": "token",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "remote": "",
            "branch": "",
            "date": "",
            "time": "",
            "token": ""
        },
        "payload": "",
        "submit": "Apply to Selected Robots",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": true,
        "className": "",
        "x": 700,
        "y": 660,
        "wires": [
            [
                "be3ce65dd88a5bc0",
                "74e0dc6829d71889"
            ]
        ]
    },
    {
        "id": "be3ce65dd88a5bc0",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "name": "Identify Selected Robots",
        "func": "// Extract form fields from msg.payload\nlet formData = msg.payload;  // Assumes payload contains {remote, branch, time, date, token}\n\n// Retrieve fleetData from flow context\nlet fleetData = flow.get(\"fleetData\") || {};\n\n// Initialize an array to store MQTT messages\nlet mqttMessages = [];\n\n// Iterate through fleetData to find selected items\nfor (const [manufacturer, serials] of Object.entries(fleetData)) {\n    for (const [serial, data] of Object.entries(serials)) {\n        // Check if 'selected' exists and is true\n        if (data.selected === true) {\n            // Construct MQTT topic\n            for (const [key, value] of Object.entries(formData)) {\n                let topic = `mrs_fleet_dashboard/${manufacturer}/${serial}/dashboard/updates/research_ws/${key}`;\n\n                // Construct MQTT message\n                let mqttMessage = {\n                    topic: topic,\n                    payload: JSON.stringify(value),  // Sending the form data as JSON\n                    qos: 1,\n                    retain: false\n                };\n\n                // Add to messages list\n                mqttMessages.push(mqttMessage);\n            }\n        }\n    }\n}\n\n// Return messages for MQTT output node\nreturn [mqttMessages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 660,
        "wires": [
            [
                "2ae68555841e65a8"
            ]
        ]
    },
    {
        "id": "2ae68555841e65a8",
        "type": "mqtt out",
        "z": "74f9e71cad0b485a",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "89d704a479c1d238",
        "x": 1210,
        "y": 660,
        "wires": []
    },
    {
        "id": "74e0dc6829d71889",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 620,
        "wires": []
    },
    {
        "id": "2f36ddca0efb1b87",
        "type": "ui_form",
        "z": "74f9e71cad0b485a",
        "name": "MFD Branch",
        "label": "",
        "group": "b7a68b9898db523f",
        "order": 8,
        "width": "9",
        "height": "3",
        "options": [
            {
                "label": "Remote",
                "value": "remote",
                "type": "text",
                "required": false,
                "rows": null
            },
            {
                "label": "Branch",
                "value": "branch",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "remote": "",
            "branch": ""
        },
        "payload": "",
        "submit": "Update Dashboard Publisher on Selected Robots",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 650,
        "y": 780,
        "wires": [
            [
                "c1954bb2815db530",
                "6f3fc8b9413b54ca"
            ]
        ]
    },
    {
        "id": "c1954bb2815db530",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "name": "Identify Selected Robots",
        "func": "// Extract form fields from msg.payload\nlet formData = msg.payload;  // Assumes payload contains {remote, branch, time, date, token}\n\n// Retrieve fleetData from flow context\nlet fleetData = flow.get(\"fleetData\") || {};\n\n// Initialize an array to store MQTT messages\nlet mqttMessages = [];\n\n// Iterate through fleetData to find selected items\nfor (const [manufacturer, serials] of Object.entries(fleetData)) {\n    for (const [serial, data] of Object.entries(serials)) {\n        // Check if 'selected' exists and is true\n        if (data.selected === true) {\n            // Construct MQTT topic\n            for (const [key, value] of Object.entries(formData)) {\n                let topic = `mrs_fleet_dashboard/${manufacturer}/${serial}/dashboard/updates/mrs_fleet_dashboard/${key}`;\n\n                // Construct MQTT message\n                let mqttMessage = {\n                    topic: topic,\n                    payload: JSON.stringify(value),  // Sending the form data as JSON\n                    qos: 1,\n                    retain: false\n                };\n\n                // Add to messages list\n                mqttMessages.push(mqttMessage);\n            }\n        }\n    }\n}\n\n// Return messages for MQTT output node\nreturn [mqttMessages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 780,
        "wires": [
            [
                "c42d8eb44093a8a8"
            ]
        ]
    },
    {
        "id": "c42d8eb44093a8a8",
        "type": "mqtt out",
        "z": "74f9e71cad0b485a",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "89d704a479c1d238",
        "x": 1210,
        "y": 780,
        "wires": []
    },
    {
        "id": "6f3fc8b9413b54ca",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 740,
        "wires": []
    },
    {
        "id": "75b82ca5b7612472",
        "type": "ui_form",
        "z": "74f9e71cad0b485a",
        "name": "Send Command",
        "label": "",
        "group": "6b3dd49f3efda1e9",
        "order": 8,
        "width": "16",
        "height": "3",
        "options": [
            {
                "label": "Command",
                "value": "command",
                "type": "multiline",
                "required": true,
                "rows": 2
            }
        ],
        "formValue": {
            "command": ""
        },
        "payload": "",
        "submit": "Send Command to Selected Robots",
        "cancel": "",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 660,
        "y": 900,
        "wires": [
            [
                "397cadc00c1f0057",
                "e0d20763fcb9fec3"
            ]
        ]
    },
    {
        "id": "397cadc00c1f0057",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "name": "Identify Selected Robots",
        "func": "// Extract form fields from msg.payload\nlet formData = msg.payload;  // Assumes payload contains {remote, branch, time, date, token}\n\n// Retrieve fleetData from flow context\nlet fleetData = flow.get(\"fleetData\") || {};\n\n// Initialize an array to store MQTT messages\nlet mqttMessages = [];\n\n// Iterate through fleetData to find selected items\nfor (const [manufacturer, serials] of Object.entries(fleetData)) {\n    for (const [serial, data] of Object.entries(serials)) {\n        // Check if 'selected' exists and is true\n        if (data.selected === true) {\n            // Construct MQTT topic\n            for (const [key, value] of Object.entries(formData)) {\n                let topic = `mrs_fleet_dashboard/${manufacturer}/${serial}/dashboard/updates/command/${key}`;\n\n                // Construct MQTT message\n                let mqttMessage = {\n                    topic: topic,\n                    payload: JSON.stringify(value),  // Sending the form data as JSON\n                    qos: 1,\n                    retain: false\n                };\n\n                // Add to messages list\n                mqttMessages.push(mqttMessage);\n            }\n        }\n    }\n}\n\n// Return messages for MQTT output node\nreturn [mqttMessages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 900,
        "wires": [
            [
                "0da68d9a718f967f"
            ]
        ]
    },
    {
        "id": "0da68d9a718f967f",
        "type": "mqtt out",
        "z": "74f9e71cad0b485a",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "89d704a479c1d238",
        "x": 1210,
        "y": 900,
        "wires": []
    },
    {
        "id": "e0d20763fcb9fec3",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 860,
        "wires": []
    },
    {
        "id": "5b674abe75e8109b",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "enable_robot_ws",
        "func": "// Example condition: Enable the button if the input payload is 'enable'\nif (msg.payload === \"robot_ws\") {\n    msg.enabled = true;\n} else {\n    msg.enabled = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "f80bf027ea7e55b8",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "enable_research_ws",
        "func": "// Example condition: Enable the button if the input payload is 'enable'\nif (msg.payload === \"research_ws\") {\n    msg.enabled = true;\n} else {\n    msg.enabled = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "7867f75bdf4277e2",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "enable_pull_dashboard",
        "func": "// Example condition: Enable the button if the input payload is 'enable'\nif (msg.payload === \"pull_dashboard\") {\n    msg.enabled = true;\n} else {\n    msg.enabled = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "189313b6955112d6",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "enable_send_command",
        "func": "// Example condition: Enable the button if the input payload is 'enable'\nif (msg.payload === \"send_command\") {\n    msg.enabled = true;\n} else {\n    msg.enabled = false;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "b63b835f08aa4e58",
        "type": "function",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "enable_robot_ws",
        "func": "if (msg.payload === \"robot_ws\") {\n    msg.ui_control = {\n        groups: {\n            \"Robot WS Group\": { hidden: false },\n            \"Research WS Group\": { hidden: true }\n        }\n    };\n} else if (msg.payload === \"research_ws\") {\n    msg.ui_control = {\n        groups: {\n            \"Robot WS Group\": { hidden: true },\n            \"Research WS Group\": { hidden: false }\n        }\n    };\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 780,
        "wires": [
            [
                "5f56dfaaea5f9c5e",
                "bb257bdf301994c9"
            ]
        ]
    },
    {
        "id": "5f56dfaaea5f9c5e",
        "type": "ui_ui_control",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "events": "all",
        "x": 400,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "bb257bdf301994c9",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 740,
        "wires": []
    },
    {
        "id": "6aaef2e157170db2",
        "type": "ui_button",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "robot_ws_btn",
        "group": "1be3c1d3644e7083",
        "order": 1,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "Robot WS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 800,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "7775dcb01153e5da",
        "type": "ui_button",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "research_ws_btn",
        "group": "1be3c1d3644e7083",
        "order": 2,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "Research WS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 790,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "bdb5418090eafe30",
        "type": "ui_button",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "mfd_btn",
        "group": "1be3c1d3644e7083",
        "order": 3,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "Pull Dashboard",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 820,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "d3e1a6ee020d4cc6",
        "type": "ui_button",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "send_command_btn",
        "group": "1be3c1d3644e7083",
        "order": 8,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "Send Command",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "topic",
        "topicType": "msg",
        "x": 780,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "540e0890bc1935c2",
        "type": "ui_multistate_switch",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "group": "1be3c1d3644e7083",
        "order": 5,
        "width": "20",
        "height": "2",
        "label": "",
        "stateField": "payload",
        "enableField": "enable",
        "passthroughField": "passthrough",
        "inputMsgField": "inputmsg",
        "rounded": false,
        "useThemeColors": true,
        "hideSelectedLabel": false,
        "multilineLabel": false,
        "passThrough": "never",
        "inputMsg": "none",
        "userInput": "enabled_show",
        "options": [
            {
                "label": "Configure Robot Workspace",
                "value": "robot_ws",
                "valueType": "str",
                "color": "#009933"
            },
            {
                "label": "Configure Research Workspace",
                "value": "research_ws",
                "valueType": "str",
                "color": "#999999"
            },
            {
                "label": "Update Fleet Dashboard",
                "value": "pull_dashboard",
                "valueType": "str",
                "color": "#ff6666"
            },
            {
                "label": "Send Command",
                "value": "send_command",
                "valueType": "str",
                "color": "#009999"
            }
        ],
        "topic": "",
        "x": 280,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "72c18b853414dc01",
        "type": "ui_ui_control",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "events": "all",
        "x": 1140,
        "y": 1480,
        "wires": [
            [
                "64a80d1d1865b6f2"
            ]
        ]
    },
    {
        "id": "8857aa157170356c",
        "type": "change",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Function\"]}}",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 1440,
        "wires": [
            [
                "72c18b853414dc01",
                "732a3e9cd5526fea"
            ]
        ]
    },
    {
        "id": "15282ebaddd9c238",
        "type": "ui_button",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "group": "a40734d79c98dc24",
        "order": 1,
        "width": "3",
        "height": "2",
        "passthru": false,
        "label": "button",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 630,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "c620170d2ba13de7",
        "type": "ui_dropdown",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "b0937f59c6faf3f4",
        "order": 1,
        "width": 4,
        "height": 4,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Show",
                "value": true,
                "type": "bool"
            },
            {
                "label": "Hide",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 640,
        "y": 1480,
        "wires": [
            [
                "a9592780d2b05e09"
            ]
        ]
    },
    {
        "id": "a9592780d2b05e09",
        "type": "switch",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 1480,
        "wires": [
            [
                "8857aa157170356c"
            ],
            [
                "e47422d6f97d7e7a"
            ]
        ]
    },
    {
        "id": "e47422d6f97d7e7a",
        "type": "change",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"group\":{\"show\":[\"Function\", \"Setting\"]}}",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 1520,
        "wires": [
            [
                "72c18b853414dc01",
                "581e27a1bb20702c"
            ]
        ]
    },
    {
        "id": "64a80d1d1865b6f2",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1480,
        "wires": []
    },
    {
        "id": "732a3e9cd5526fea",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1440,
        "wires": []
    },
    {
        "id": "581e27a1bb20702c",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1520,
        "wires": []
    },
    {
        "id": "4b64a433ca7fb104",
        "type": "ui_button",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "group": "b0937f59c6faf3f4",
        "order": 1,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "show",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 770,
        "y": 1440,
        "wires": [
            [
                "8857aa157170356c"
            ]
        ]
    },
    {
        "id": "298d697ed10f895a",
        "type": "ui_button",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "group": "b0937f59c6faf3f4",
        "order": 1,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "hide",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 770,
        "y": 1520,
        "wires": [
            [
                "e47422d6f97d7e7a"
            ]
        ]
    },
    {
        "id": "f5d4452bd82a301d",
        "type": "change",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"tab\":{\"selected\":[\"Robot/Research Workspaces Tracker\"]}}",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 1680,
        "wires": [
            [
                "b68b652884e3be38",
                "e6c4184ea528ce42"
            ]
        ]
    },
    {
        "id": "b68b652884e3be38",
        "type": "ui_ui_control",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "events": "change",
        "x": 840,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "25e302b0e23e044d",
        "type": "ui_button",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "",
        "group": "b0937f59c6faf3f4",
        "order": 1,
        "width": "2",
        "height": "1",
        "passthru": false,
        "label": "show",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 450,
        "y": 1680,
        "wires": [
            [
                "f5d4452bd82a301d"
            ]
        ]
    },
    {
        "id": "e6c4184ea528ce42",
        "type": "debug",
        "z": "74f9e71cad0b485a",
        "d": true,
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 1620,
        "wires": []
    },
    {
        "id": "0cfe446621403423",
        "type": "link in",
        "z": "74f9e71cad0b485a",
        "name": "link in 1",
        "links": [
            "da4812d5446d2934"
        ],
        "x": 345,
        "y": 140,
        "wires": [
            [
                "6750ecdadbf2dc4e",
                "fcf6ee8dd005be1d"
            ]
        ]
    },
    {
        "id": "da4812d5446d2934",
        "type": "link out",
        "z": "74f9e71cad0b485a",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "0cfe446621403423"
        ],
        "x": 1055,
        "y": 260,
        "wires": []
    },
    {
        "id": "8bc3dfad47706ba0",
        "type": "link out",
        "z": "74f9e71cad0b485a",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "491d74570f78fcd8"
        ],
        "x": 635,
        "y": 140,
        "wires": []
    },
    {
        "id": "491d74570f78fcd8",
        "type": "link in",
        "z": "74f9e71cad0b485a",
        "name": "link in 3",
        "links": [
            "8bc3dfad47706ba0"
        ],
        "x": 655,
        "y": 240,
        "wires": [
            [
                "4215a8f8e41d6ebe",
                "da09126c166f9ab3",
                "3f819778fbd57881",
                "b1840e90cc72f393",
                "8bfa5fe0d1af789b"
            ]
        ]
    },
    {
        "id": "da09126c166f9ab3",
        "type": "ui_table",
        "z": "74f9e71cad0b485a",
        "group": "ddc248bb9c67f143",
        "name": "Status Table",
        "order": 2,
        "width": "33",
        "height": "5",
        "columns": [
            {
                "field": "manufacturer",
                "title": "Manufacturer",
                "width": "6%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "serial",
                "title": "Serial #",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_name",
                "title": "Robot Name",
                "width": "10%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_ws/branch",
                "title": "Branch",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_ws/status",
                "title": "Status",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/remote",
                "title": "Research Remote",
                "width": "28%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/branch",
                "title": "Branch",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/status",
                "title": "Status",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "battery",
                "title": "Battery",
                "width": "4%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "last_online",
                "title": "Last Seen",
                "width": "10%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 850,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3f819778fbd57881",
        "type": "ui_table",
        "z": "74f9e71cad0b485a",
        "group": "3de19491c2d96cf1",
        "name": "Status Table",
        "order": 2,
        "width": "33",
        "height": "5",
        "columns": [
            {
                "field": "selected",
                "title": "",
                "width": "2%",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "manufacturer",
                "title": "Manufacturer",
                "width": "6%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "serial",
                "title": "Serial #",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_name",
                "title": "Robot Name",
                "width": "10%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_ws/branch",
                "title": "Branch",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_ws/status",
                "title": "Status",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/remote",
                "title": "Research Remote",
                "width": "28%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/branch",
                "title": "Branch",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/status",
                "title": "Status",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "battery",
                "title": "Battery",
                "width": "4%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "last_online",
                "title": "Last Seen",
                "width": "10%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 850,
        "y": 240,
        "wires": [
            [
                "da4812d5446d2934"
            ]
        ]
    },
    {
        "id": "8bfa5fe0d1af789b",
        "type": "ui_table",
        "z": "74f9e71cad0b485a",
        "group": "9f7e46cb54397403",
        "name": "Status Table",
        "order": 2,
        "width": "33",
        "height": "5",
        "columns": [
            {
                "field": "selected",
                "title": "",
                "width": "2%",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "manufacturer",
                "title": "Manufacturer",
                "width": "6%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "serial",
                "title": "Serial #",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_name",
                "title": "Robot Name",
                "width": "10%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_ws/branch",
                "title": "Branch",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_ws/status",
                "title": "Status",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/remote",
                "title": "Research Remote",
                "width": "28%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/branch",
                "title": "Branch",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/status",
                "title": "Status",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "battery",
                "title": "Battery",
                "width": "4%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "last_online",
                "title": "Last Seen",
                "width": "10%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 850,
        "y": 320,
        "wires": [
            [
                "da4812d5446d2934"
            ]
        ]
    },
    {
        "id": "b1840e90cc72f393",
        "type": "ui_table",
        "z": "74f9e71cad0b485a",
        "group": "cffc62065f25e999",
        "name": "Status Table",
        "order": 2,
        "width": "33",
        "height": "5",
        "columns": [
            {
                "field": "selected",
                "title": "",
                "width": "2%",
                "align": "center",
                "formatter": "tickCross",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "manufacturer",
                "title": "Manufacturer",
                "width": "6%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "serial",
                "title": "Serial #",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_name",
                "title": "Robot Name",
                "width": "10%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_ws/branch",
                "title": "Branch",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "robot_ws/status",
                "title": "Status",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/remote",
                "title": "Research Remote",
                "width": "28%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/branch",
                "title": "Branch",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "research_ws/status",
                "title": "Status",
                "width": "8%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "battery",
                "title": "Battery",
                "width": "4%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "last_online",
                "title": "Last Seen",
                "width": "10%",
                "align": "left",
                "formatter": "html",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 850,
        "y": 280,
        "wires": [
            [
                "da4812d5446d2934"
            ]
        ]
    }
]